#!/bin/bash
# Description: Nonlinearly build FOD template, with restricted masking rules.
# author: Xiaoxiao Qi
# date: 02/05/2020

if [ $# -lt 9 ]
then
    echo "Instructions: The script tries to nonlinearly align FOD images."
    echo "Usage: `basement $0` foddir maskdir wmmaskdir outdir zigzag(in the multi-zigzag process) ultimate_space raw_fod raw_dti_mask raw_wm_mask"
    echo "foddir: a folder contains only fods."
    echo "maskdir: a folder contains only mask."
    echo "wmmaskdir: a folder contains only wm masks"
    echo "ourdir: all the outputs generated from template building."
    exit
fi

# looking around
abspath=`realpath $0`
scriptdir=$(dirname $abspath)
scripts=${scriptdir}/scripts
utils=${scriptdir}/utils

if [ ! -e "${utils}/average_images.sh" ];then
    echo "Can't find utility files. Please check path or change \${scriptdir}."
    exit
fi

# parse inputs
foddir=`realpath $1`
maskdir=`realpath $2`
wmmaskdir=`realpath $3`
t1wmaskdir=`realpath $4`
outdir=`realpath $5`
zigzag=$6
ultimate_space=$7
raw_foddir=$8
raw_dti_maskdir=$9
raw_wm_maskdir=${10}
raw_t1w_maskdir=${11}


# iterative registration parameters
Niter=6

# cluster parameters
njobs=202 # assuming 156 per person
stime="24:00:00"
ltime="48:00:00"
thread=1 # multithreading only in registration
nthreads=2

debug_mode=0

# check validation of inputs
if [ ! -e ${foddir} ];then
    echo "Fod directory does not exist. Please indicate a valid directory."
fi
check_count_fod=`ls -1 ${foddir}/*.mif 2>/dev/null | wc -l` # Hardcoded naming pattern

if [ ! -e ${maskdir} ];then
    echo "Brain mask directory does not exist. Please indicate a valid directory."
fi
check_count_mask=`ls -1 ${maskdir}/*.nii.gz 2>/dev/null | wc -l` # Hardcoded naming pattern

if [ ! -e ${wmmaskdir} ];then
    echo "WM mask directory does not exist. Please indicate a valid directory."
fi
check_count_wmmask=`ls -1 ${wmmaskdir}/*.nii.gz 2>/dev/null | wc -l` # Hardcoded naming pattern

if [ ${check_count_mask} != ${check_count_fod} ];then
    echo "Number of masks does not match the number of fod images."
    echo "Exiting..."
    exit
fi

if [ ${check_count_mask} != ${check_count_wmmask} ];then
    echo "Number of masks does not match the number of WM masks."
    echo "Exiting..."
    exit
fi

if [ ! -e ${outdir} ];then
    echo "The indicated output directory does not exist, generating..."
    mkdir -p ${outdir}
fi

# Preparing for initiation
if [ -e "${outdir}/subjects.txt" ];then
    # Clean up
    rm ${outdir}/subjects*.txt
fi
num=0
for subj in `ls ${foddir}/*.mif`
do 
    fodname=$(basename "${subj}")
    purename=${fodname%_fod*}
    fods_list[${num}]=${foddir}/${fodname}
    masks_list[${num}]=${maskdir}/${purename}_*.nii.gz # hardcoded
    wmmasks_list[${num}]=${wmmaskdir}/${purename}_*.nii.gz # hardcoded
    t1wmasks_list[${num}]=${t1wmaskdir}/${purename}_*.nii.gz
    
    echo ${foddir}/${fodname} >> ${outdir}/subjects.txt
    echo ${maskdir}/${purename}_*.nii.gz >> ${outdir}/subjects_masks.txt
    echo ${wmmaskdir}/${purename}_*.nii.gz >> ${outdir}/subjects_wmmasks.txt
    echo ${t1wmaskdir}/${purename}_*.nii.gz >> ${outdir}/subjects_t1wmasks.txt
    ## record anticipated outputs
    echo "${outdir}/${purename}_*warp.mif" >> ${outdir}/subjects_warps.txt
    echo "${outdir}/${purename}_*warp.nii.gz" >> ${outdir}/subjects_warps_ants.txt
    echo "${outdir}/${purename}_*warp_inv.mif" >> ${outdir}/subjects_warps_inv.txt
    echo "${outdir}/${purename}_*warped.mif" >> ${outdir}/subjects_warped.txt
    echo "${outdir}/${purename}_*warp_su.mif" >> ${outdir}/subjects_warp_su.txt

    echo "${outdir}/${purename}_*fodmask.nii.gz" >> ${outdir}/subjects_fodmasks.txt
    echo "${outdir}/${purename}_*fodmasked.mif" >> ${outdir}/subjects_fodmasked.txt

    #echo "${outdir}/${purename}_warp_inv.nii.gz" >> ${outdir}/subjects_warps_inv_ants.txt

    echo "${outdir}/${purename}_*warped_dtimask.nii.gz" >>${outdir}/subjects_warped_dtimasks.txt
    echo "${outdir}/${purename}_*warped_wmmask.nii.gz" >>${outdir}/subjects_warped_wmmasks.txt
    echo "${outdir}/${purename}_*warped_t1wmask.nii.gz" >>${outdir}/subjects_warped_t1wmasks.txt
    let num=num+1
done

# Checking names of masks by length of the lists
nfods=${#fods_list[@]}
nmasks=${#masks_list[@]}
nwmmasks=${#wmmasks_list[@]}
nt1wmasks=${#t1wmasks_list[@]}
if [ ${nfods} -ne ${nmasks} ] || [ ${nfods} -ne ${nwmmasks} ] || [ ${nmasks} -ne ${nwmmasks} ] || [ ${nt1wmasks} -ne ${nwmmasks} ]
then
    echo "Check the names of masks, should be hardcoded name patterns '<fodname>_mask.mif'"
    echo "Exiting..."
    exit
fi

# main loop initiation
# preparing inital template # can be changed later
count=0 ##
## Preparing job folders
jobdir="${outdir}/jobdir_init"
if [ -d ${jobdir} ];then
    rm -rf ${jobdir}
    mkdir -p ${jobdir}
else
    mkdir -p ${jobdir}
fi
## Masking the fod by two masks
for (( i=0; i<$nfods; i++ ))
do
    fod=${fods_list[$i]}
    mask=${masks_list[$i]}
    t1wmask=${t1wmasks_list[$i]}

    filename=$(basename "${fod}")
    extension="${filename##*.}"
    filename="${filename%.*}"

    cmd0="fslmaths ${mask} -mul ${t1wmask} ${outdir}/${filename}_fodmask.nii.gz -odt int"
    cmd1="mrcalc ${fod} ${outdir}/${filename}_fodmask.nii.gz -multiply ${outdir}/${filename}_fodmasked.mif -force -nthreads 1"

    joblist="${jobdir}/joblist_fodmask.txt"
    jobname="fodmask_${i}"
    jobscript="${jobdir}/job_${jobname}_qsub.sh"
    echo '#!/bin/bash'>${jobscript}
    echo ${cmd0}>>${jobscript}
    echo ${cmd1}>>${jobscript}
    echo ${jobname}>>${joblist}
done
bash ${utils}/submit_jobs_v9_wait ${joblist} ${stime} 8G ${thread} ${jobdir} ${nfods} ${debug_mode}
## get the initial template
cmd0="bash ${scripts}/get_mean_masked_average.sh ${outdir}/subjects_fodmasked.txt ${outdir}/subjects_fodmasks.txt ${outdir}/fod_template_iter${count}.mif"
joblist="${jobdir}/joblist_fodavrg.txt"
jobname="avrgfod${count}"
jobscript="${jobdir}/job_${jobname}_qsub.sh"
echo '#!/bin/bash'>${jobscript}
echo ${cmd0}>>${jobscript}
echo ${jobname}>>${joblist}
bash ${utils}/submit_jobs_v9_wait ${joblist} ${stime} 8G ${thread} ${jobdir} 1 ${debug_mode}


# main loop
while [ ${count} -lt ${Niter} ] # start from 0
do
    # REGISTRATION
    ## indicate target
    template_name="${outdir}/fod_template_iter${count}.mif"
    ## indicate jobdir
    jobdir="${outdir}/jobdir_iter${count}"
    if [ -d ${jobdir} ];then
        rm -rf ${jobdir}
        mkdir -p ${jobdir}
    else
        mkdir -p ${jobdir}
    fi
    ## do registration
    for (( i=0; i<$nfods; i++ ))
    do
        fod=${fods_list[$i]}
        mask=${masks_list[$i]}

        filename=$(basename "${fod}")
        extension="${filename##*.}"
        filename="${filename%.*}"

        bsname=${filename%_fod_deformed}

        cmd="bash ${scripts}/get_nl_masked_registration.sh ${fod} ${outdir}/${bsname}_*fodmask.nii.gz ${template_name} ${outdir} ${nthreads}"
        joblist="${jobdir}/joblist_reg.txt"
        jobname="fodreg${count}_${i}"
        jobscript=${jobdir}/job_${jobname}_qsub.sh
        echo '#!/bin/bash'>${jobscript}
        echo ${cmd}>>${jobscript}
        echo ${jobname}>>${joblist}
    done
    
    #check_count_registrationresults=`ls -1 ${outdir}/*_warp.nii.gz 2>/dev/null | wc -l`
    #if [ ${check_count_registrationresults} -lt ${nfods} ];then
        bash ${utils}/submit_jobs_v9_wait ${joblist} ${stime} 8G ${nthreads} ${jobdir} ${nfods} ${debug_mode}
    #fi

    #SHAPE UPDATE
    ## average inverse
    cmd="bash ${utils}/average_images.sh ${outdir}/subjects_warps_inv.txt ${outdir}/avrginvwarp_iter${count}.mif"
    cmd1="bash ${scripts}/convert_miftrans2ants.sh ${template_name} ${outdir}/avrginvwarp_iter${count}.mif ${fod} ${outdir}/avrginvwarp_iter${count}.nii.gz"
    joblist="${jobdir}/joblist_avrginvwarp.txt"
    jobname="avrginvwarp${count}"
    jobscript="${jobdir}/job_${jobname}_qsub.sh"
    echo '#!/bin/bash'>${jobscript}
    echo ${cmd}>>${jobscript}
    echo ${cmd1}>>${jobscript}
    echo ${jobname}>>${joblist}
    #if [ ! -f ${outdir}/avrginvwarp_iter${count}.mif ];then
        bash ${utils}/submit_jobs_v9_wait ${joblist} ${ltime} 8G ${thread} ${jobdir} 1 ${debug_mode}
    #fi
    ## mask the inverse file to generate shape update and apply it to subjects
    
    for (( i=0; i<$nfods; i++ ))
    do
        fod=${fods_list[$i]}
        wmmask=${wmmasks_list[$i]}
        mask=${masks_list[$i]}

        filename=$(basename "${fod}")
        extension="${filename##*.}"
        filename="${filename%.*}"

        bsname=${filename%_fod_deformed}

        rawfod="${raw_foddir}/${bsname}_fod.mif"
        raw_dti_mask="${raw_dti_maskdir}/${bsname}_*_mask.nii.gz"
        raw_wm_mask="${raw_wm_maskdir}/${bsname}_*_mask.nii.gz"
        raw_t1w_mask="${raw_t1w_maskdir}/${bsname}_*_mask.nii"

        cmd0="fslmaths ${outdir}/avrginvwarp_iter${count}.nii.gz -mul ${wmmask} -nan ${outdir}/${filename}_warp_su_masked.nii.gz -odt float"
        cmd1="fslmaths ${outdir}/${filename}_warp.nii.gz -mul ${wmmask} -nan ${outdir}/${filename}_warp_masked.nii.gz -odt float"
        cmd2="trans=\`bash /data/ywu94/Final_template/scripts/Get_previous_transformations.sh ${bsname} ${zigzag} FOD\`"
        cmd3="bash ${scripts}/trans2fod.sh ${rawfod} \"-t ${outdir}/${filename}_warp_su_masked.nii.gz -t ${outdir}/${filename}_warp_masked.nii.gz \${trans}\" ${ultimate_space} ${outdir}/${filename}_warped.mif"
        cmd4="antsApplyTransforms -d 3 --verbose 1 --float 1 -i ${raw_dti_mask} -r ${ultimate_space} -t ${outdir}/${filename}_warp_su_masked.nii.gz -t ${outdir}/${filename}_warp_masked.nii.gz \${trans} -o ${outdir}/${filename}_warped_dtimask.nii.gz -n GenericLabel"
        cmd5="antsApplyTransforms -d 3 --verbose 1 --float 1 -i ${raw_wm_mask} -r ${ultimate_space} -t ${outdir}/${filename}_warp_su_masked.nii.gz -t ${outdir}/${filename}_warp_masked.nii.gz \${trans} -o ${outdir}/${filename}_warped_wmmask.nii.gz -n GenericLabel"
        cmd6="trans1=\`bash /data/ywu94/Final_template/scripts/Get_previous_transformations.sh ${bsname} ${zigzag} T1\`"
        cmd7="antsApplyTransforms -d 3 --verbose 1 --float 1 -i ${raw_t1w_mask} -r ${ultimate_space} -t ${outdir}/${filename}_warp_su_masked.nii.gz -t ${outdir}/${filename}_warp_masked.nii.gz \${trans1} -o ${outdir}/${filename}_warped_t1wmask.nii.gz -n GenericLabel"
        
        joblist="${jobdir}/joblist_update.txt"
        jobname="fod_su${count}_${i}"
        jobscript="${jobdir}/job_${jobname}_qsub.sh"
        echo '#!/bin/bash'>${jobscript}
        echo ${cmd0}>>${jobscript}
        echo ${cmd1}>>${jobscript}
        echo ${cmd2}>>${jobscript}
        echo ${cmd3}>>${jobscript}
        echo ${cmd4}>>${jobscript}
        echo ${cmd5}>>${jobscript}
        echo ${cmd6}>>${jobscript}
        echo ${cmd7}>>${jobscript}
        echo "${jobname}">>${joblist}
    done
    
#   check_count_su=`ls -1 ${outdir}/*_warp_su.nii.gz 2>/dev/null | wc -l`
#   if [ ${check_count_su} -lt ${nfods} ];then
    bash ${utils}/submit_jobs_v9_wait ${joblist} ${stime} 8G ${thread} ${jobdir} ${nfods} ${debug_mode}
#   fi
    
    ## update template
    let count=count+1
    for (( i=0; i<$nfods; i++ ))
    do
        fod=${fods_list[$i]}

        filename=$(basename "${fod}")
        extension="${filename##*.}"
        filename="${filename%.*}"
        bsname=${filename%_fod_deformed}

        cmd0="fslmaths ${outdir}/${bsname}_*warped_dtimask.nii.gz -mul ${outdir}/${bsname}_*warped_t1wmask.nii.gz ${outdir}/${filename}_fodmask.nii.gz -odt int"
        cmd1="mrcalc ${outdir}/${filename}_warped.mif ${outdir}/${filename}_fodmask.nii.gz -multiply ${outdir}/${filename}_fodmasked.mif -force -nthreads 1"

        joblist="${jobdir}/joblist_fodmask.txt"
        jobname="fodmask_${i}"
        jobscript="${jobdir}/job_${jobname}_qsub.sh"
        echo '#!/bin/bash'>${jobscript}
        echo ${cmd0}>>${jobscript}
        echo ${cmd1}>>${jobscript}
        echo ${jobname}>>${joblist}
    done
    bash ${utils}/submit_jobs_v9_wait ${joblist} ${stime} 8G ${thread} ${jobdir} ${nfods} ${debug_mode}
    ## get the initial template
    cmd0="bash ${scripts}/get_mean_masked_average.sh ${outdir}/subjects_fodmasked.txt ${outdir}/subjects_fodmasks.txt ${outdir}/fod_template_iter${count}.mif"
    joblist="${jobdir}/joblist_fodavrg.txt"
    jobname="avrgfod${count}"
    jobscript="${jobdir}/job_${jobname}_qsub.sh"
    echo '#!/bin/bash'>${jobscript}
    echo ${cmd0}>>${jobscript}
    echo ${jobname}>>${joblist}
    bash ${utils}/submit_jobs_v9_wait ${joblist} ${stime} 8G ${thread} ${jobdir} 1 ${debug_mode}
done

mrconvert ${outdir}/fod_template_iter${Niter}.mif ${outdir}/fod_template.nii.gz
#mrconvert ${outdir}/fod_template_mask_iter${Niter}.mif ${outdir}/fod_template_mask.nii.gz

